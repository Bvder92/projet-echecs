même jeu, mais:
*tous les int inutiles sont des char
    -> On a donc un échéquier de unsigned char (valeurs = 0-255) -> pas besoin de changer nos DEFINES


*au lieu d'utiliser des tableaux de taille fixes pour les moves (souvent remplis de -1), on utilise des listes chainées
    -possiblité d'ajouter/supprimer des éléments ->ne contiennent que les valeurs utiles -> plus petites
    -recherche de valeurs plus lente que dans un tableau mais nos listes sont très petites(max théorique=27 mais rarement + de 12) donc négligeable
    
*DEFINES plus clairs:
    -NOIR = 128 devient PIECE_NOIREE
    -SPECIAL = 100 devient PIECE_SPECIAL
    -MAX = 64 devient TAILLE_ECHEQUIER
    
    -au lieu d'utiliser 0 et 1 pour nos variables de couleur (car c'était le retour de get_color):
        -VIDE = 0
        -BLANC = 1
        -NOIR = 2


*retours/paramètres des fonctions modifiés pour être + logiques
    -exemple: get_color n'a pas besoin de (int position, int * plateau), on peut juste lui passer (unsigned char piece)
        -> pour récupérer la couleur d'une piece, on appelle get_color(echequier[position]), même résultat.



=> Le jeu tourne quasi comme avant, seules différences:
    -affichage à l'utilisateur des moves disponibles(fonction bouger) dans l'ordre inverse, car on ajoute les moves en tete de liste
    -pas encore implémenté le castle

=> À FAIRE:
    -minimax(logique)
    -castle
    -promotions
    -fonction select_piece comme avant pcq la fonction main c'est le bordel là
        (elle existe mais marche pas)
